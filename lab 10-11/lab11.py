# -*- coding: utf-8 -*-
import psycopg2

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    host='localhost',
    database='suppliers',
    user='postgres',
    password='123'
)
cursor = conn.cursor()

# –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def insert_or_update_user(name, phone_number):
    if not phone_number.isdigit() or len(phone_number) > 10:
        print(f" –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        return

    cursor.execute("SELECT COUNT(*) FROM phone WHERE user_name = %s", (name,))
    count = cursor.fetchone()[0]

    if count > 0:
        cursor.execute("UPDATE phone SET score = %s WHERE user_name = %s", (phone_number, name))
        print(f" –ö–æ–Ω—Ç–∞–∫—Ç {name} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        cursor.execute("INSERT INTO phone (user_name, score) VALUES (%s, %s)", (name, phone_number))
        print(f" –ö–æ–Ω—Ç–∞–∫—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω.")

    conn.commit()

# –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def insert_multiple_users(data_list):
    for name, phone_number in data_list:
        if not phone_number.isdigit():
            print(f" –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number} –¥–ª—è {name}")
            continue

        cursor.execute("SELECT COUNT(*) FROM phone WHERE user_name = %s", (name,))
        count = cursor.fetchone()[0]

        if count > 0:
            cursor.execute("UPDATE phone SET score = %s WHERE user_name = %s", (phone_number, name))
        else:
            cursor.execute("INSERT INTO phone (user_name, score) VALUES (%s, %s)", (name, phone_number))

    conn.commit()
    print(" –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É
def collecting_info_by_pattern(pattern):
    pattern_like = f"%{pattern}%"
    cursor.execute(
        "SELECT user_id, user_name, score FROM phone WHERE user_name LIKE %s OR score::TEXT LIKE %s ORDER BY user_id",
        (pattern_like, pattern_like)
    )
    rows = cursor.fetchall()
    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
    for row in rows:
        print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
def collecting_info_with_pagination(limit, offset):
    cursor.execute("SELECT user_id, user_name, score FROM phone ORDER BY user_id LIMIT %s OFFSET %s", (limit, offset))
    rows = cursor.fetchall()
    print(f"\n –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
    for row in rows:
        print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
def delete_user_by_name(name):
    cursor.execute("DELETE FROM phone WHERE user_name = %s RETURNING user_id;", (name,))
    deleted = cursor.fetchone()
    conn.commit()
    if deleted:
        print(f"üóë –ö–æ–Ω—Ç–∞–∫—Ç {name} —É–¥–∞–ª—ë–Ω.")
    else:
        print(" –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
def delete_user_by_phone(phone_number):
    cursor.execute("DELETE FROM phone WHERE score = %s RETURNING user_id;", (phone_number,))
    deleted = cursor.fetchone()
    conn.commit()
    if deleted:
        print(f"üóë –ö–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É–¥–∞–ª—ë–Ω.")
    else:
        print(" –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
if __name__ == '__main__':
    try:
        print("\nüì± –ú–µ–Ω—é:")
        print("1 - –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        print("2 - –ü–æ–∏—Å–∫")
        print("3 - –£–¥–∞–ª–∏—Ç—å")
        print("4 - –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ")
        print("5 - –ü–∞–≥–∏–Ω–∞—Ü–∏—è")

        op = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é: ").strip()

        if op == "1":
            name = input("–ò–º—è: ").strip()
            phone = input("–¢–µ–ª–µ—Ñ–æ–Ω (11 —Ü–∏—Ñ—Ä): ").strip()
            insert_or_update_user(name, phone)

        elif op == "2":
            pattern = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞: ").strip()
            collecting_info_by_pattern(pattern)

        elif op == "3":
            mode = input("–£–¥–∞–ª–∏—Ç—å –ø–æ:\n1 - –ò–º–µ–Ω–∏\n2 - –¢–µ–ª–µ—Ñ–æ–Ω—É\n–í—ã–±–æ—Ä: ").strip()
            if mode == "1":
                name = input("–ò–º—è: ").strip()
                delete_user_by_name(name)
            elif mode == "2":
                phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ").strip()
                delete_user_by_phone(phone)

        elif op == "4":
            count = int(input("–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å: "))
            contacts = []
            for _ in range(count):
                name = input("–ò–º—è: ").strip()
                phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ").strip()
                contacts.append((name, phone))
            insert_multiple_users(contacts)

        elif op == "5":
            limit = int(input("–°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑–∞—Ç—å: "))
            offset = int(input("–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å: "))
            collecting_info_with_pagination(limit, offset)

        else:
            print(" –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.")

    except Exception as e:
        print(" –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e)

    finally:
        cursor.close()
        conn.close()
        print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ.")
